#baekjoon 1193번

x = int(input())

group = 0              #그룹 개수
group_count = 0        #그룹 원소의 개수

while group_count < x:
    group += 1              
    group_count += group    

group_count -= group   #x가 속하는 그룹 바로 전 그룹까지의 원소개수의 총합
                       #따라서 여기 group_count의 값은 무조건 1,3,6,10,15... 등이다.

if group % 2 == 0:                      #짝수그룹의 분자는 오름차순, 분모는 내림차순
    i = x - group_count
    j = group - i + 1
else:
    i = group - (x - group_count) + 1   #홀수그룹의 분자는 내림차순, 분모는 오름차순
    j = x - group_count

print(f"{i}/{j}")


# 개쩌는 숏코딩...
# x = int(input());a=0
# while x>0:a+=1;x-=a
# print("%d/%d"%(1-x, a+x)[::a%2*2-1])


#------------------------------------------------------------------------------------


#baekjoon 10872번

N = int(input())

def fact(N):
    temp = 1
    for i in range(1,N+1):
        temp *= i
    return temp

print(fact(N))

#재귀함수 (팩토리얼 계산)


# ---------------------------------------------------------------------------------------


#baekjoon 2562번

num_list = []

for num in range(9):
    num_list.append(int(input()))
    
print(max(num_list))
print(num_list.index(max(num_list)) + 1)

# 9개의 정수를 입력받고 최댓값과 그 최댓값이 몇 번째 수인지 출력하는 코드


# ------------------------------------------------------------------------------------------


#baekjoon 2798번


N, M = map(int, input().split())
array = list(map(int, input().split()))

result = 0         # 0으로 초기화 시켜주지 않으면 런타임 에러를 일으키니 주의
sum= 0

for i in range(N-2):                   # N-2, N-1로 해주지 않으면 쓸데없이 더 계산하기 때문에 해주는 것이 좋음.                              
    for j in range(i+1,N-1):           # 그러나 오류는 발생하지 않음            
        for k in range(j+1,N):
            sum = array[i] + array[j] + array[k]
            if(sum > M):
               continue
            else:
                result = max(result, sum )   

print(result)






# C언어 코딩


#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main(void)
{
	int N, M;
	int sum = 0;
	int result = 0;
	int Card_list[100] = { 0 };
	scanf("%d %d", &N, &M);

	for (int i = 0; i < N; i++)
		scanf("%d", &Card_list[i]);

	for (int i = 0; i < N - 2; i++) {
		for (int j = i + 1; j < N - 1; j++) {
			for (int k = j + 1; k < N; k++) {
				sum = Card_list[i] + Card_list[j] + Card_list[k];
				if (sum > result && sum <= M)
					result = sum;
			}
		}
	}

	printf("%d\n", result);

	return 0;
}


# ------------------------------------------------------------------------------------------
